# trade.py
import asyncio
import logging

from utils.jup_swap import execute_swap, get_quote
from utils.sell_token import sell_token
from utils.token_filters import is_token_valid
from wallets.wallet_manager import get_random_wallet
from config.settings import config

logger = logging.getLogger(__name__)

# File d'attente globale pour tokens non tradables
pending_tokens = {}

async def try_buy_and_sell(token_address: str, creator_address: str):
    wallet = get_random_wallet()
    logger.info(
        f"üí∞ Achat/Revente INITI√â pour {token_address} (cr√©√© par {creator_address}) avec wallet {wallet.public_key}"
    )

    if not await is_token_valid(token_address, creator_address):
        logger.warning(f"üõë Token {token_address} refus√© (honeypot ou cr√©ateur blacklist√©)")
        return

    # Quote pour savoir si tradable
    quote = await get_quote(token_address)
    if not quote:
        logger.warning(f"üîπ Token {token_address} non tradable via Jupiter. Ajout √† la file d'attente de retry.")
        pending_tokens[token_address] = {
            "creator": creator_address,
            "wallet": wallet,
            "retries": 0,
        }
        return

    await handle_buy_and_sell(token_address, wallet)


async def retry_pending_tokens():
    if not pending_tokens:
        return

    for token_address in list(pending_tokens.keys()):
        entry = pending_tokens[token_address]
        wallet = entry["wallet"]
        entry["retries"] += 1

        logger.info(f"‚è≥ Retry #{entry['retries']} pour {token_address}")
        quote = await get_quote(token_address)
        if quote:
            logger.info(f"üîπ Token {token_address} devenu tradable. Achat en cours...")
            await handle_buy_and_sell(token_address, wallet)
            del pending_tokens[token_address]
        elif entry["retries"] >= config.max_retries:
            logger.warning(f"‚ùå Token {token_address} ignor√© apr√®s {config.max_retries} essais.")
            del pending_tokens[token_address]


async def handle_buy_and_sell(token_address: str, wallet):
    success = await execute_swap(token_address, wallet)
    if not success:
        logger.error(f"‚ùå Achat √©chou√© ou output nul pour {token_address}")
        return

    await asyncio.sleep(3)
    await sell_token(token_address, wallet)
