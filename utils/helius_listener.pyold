import os
import asyncio
import json
import logging
import websockets

logger = logging.getLogger(__name__)

async def start_helius_ws(callback, program_id: str):
    print(f"[helius_listener] start_helius_ws appelé avec program_id={program_id}")
    # le reste du code...

class CriticalHeliusError(Exception):
    pass

async def start_helius_ws(callback, program_id: str):
    """
    Démarre la connexion WebSocket avec Helius et transmet chaque message au callback.

    Args:
        callback: fonction async qui prend en argument le message JSON reçu.
        program_id: str, l'adresse du programme Solana à écouter (ex: Pump.fun).
    """
    helius_key = os.getenv("HEL_API_KEY")
    if not helius_key:
        raise CriticalHeliusError("Clé API HEL_API_KEY non définie dans l'environnement")

    ws_url = f"wss://mainnet.helius-rpc.com/?api-key={helius_key}"

    try:
        async with websockets.connect(ws_url) as websocket:
            logger.info("WebSocket connecté à Helius")

            subscribe_message = json.dumps({
                "jsonrpc": "2.0",
                "id": 1,
                "method": "programSubscribe",
                "params": {
                    "programId": program_id
                }
            })

            await websocket.send(subscribe_message)
            logger.info(f"Message d'abonnement envoyé pour programId={program_id}")

            async for raw_message in websocket:
                try:
                    message = json.loads(raw_message)
                except Exception as e:
                    logger.error(f"Erreur décodage JSON: {e}")
                    continue

                await callback(message)

    except websockets.ConnectionClosed as e:
        logger.warning(f"Connexion WebSocket fermée : {e}")
        raise CriticalHeliusError("Connexion WebSocket fermée prématurément")

    except Exception as e:
        logger.error(f"Erreur inattendue WebSocket : {e}")
        raise
